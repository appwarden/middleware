name: ðŸš€ Release @appwarden/middleware
on:
  push:
    branches:
      - main

# Explicitly define permissions following the principle of least privilege
permissions:
  contents: write # for semantic-release to create releases and tags
  issues: write # for semantic-release to comment on issues
  pull-requests: write # for semantic-release to comment on PRs
  id-token: write # for npm provenance
  packages: write # for publishing to GitHub Packages

jobs:
  release:
    name: ðŸš€ Release @appwarden/middleware
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.1
        with:
          fetch-depth: 0 # Needed for semantic-release to generate correct version numbers
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4.0.0
        with:
          version: 10.4.1
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v4.0.2
        with:
          node-version: lts/iron
          registry-url: https://registry.npmjs.org
          cache: pnpm

      - name: Verify lockfile integrity
        run: |
          # Check if lockfile has been tampered with
          echo "Verifying lockfile integrity..."
          pnpm dedupe --check

      - name: Install dependencies
        run: |
          # Set safer npm config
          npm config set ignore-scripts true
          npm config set audit true

          # Install dependencies with frozen lockfile for reproducibility
          pnpm install --ignore-scripts --frozen-lockfile
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # Disable progress bars for cleaner logs
          NPM_CONFIG_PROGRESS: "false"

      - name: Run post-install scripts
        run: |
          pnpm prepare
          pnpm build

      - name: Run security checks
        run: |
          # Audit dependencies for security vulnerabilities
          pnpm audit --audit-level high

          # Check for unpinned dependencies (using ^ or ~)
          echo "Checking for unpinned dependencies..."
          if grep -E '"[^"]+": "\^[^"]+"|"[^"]+": "~[^"]+"' package.json; then
            echo "Warning: Found unpinned dependencies in package.json. Consider pinning them for better security."
            # Not failing the build, just warning
          fi

      - name: Run code quality checks
        run: |
          pnpm check
          pnpm test

      # Setup for GitHub Packages
      - name: Setup Node.js for GitHub Packages
        uses: actions/setup-node@v4.0.2
        with:
          node-version: lts/iron
          registry-url: https://npm.pkg.github.com
          scope: "@appwarden"

      - name: Setup npm authentication
        run: |
          # Create .npmrc with proper authentication tokens
          echo "always-auth=true" > .npmrc
          echo "//registry.npmjs.org/:_authToken=\${NPM_TOKEN}" >> .npmrc
          echo "//npm.pkg.github.com/:_authToken=\${GITHUB_TOKEN}" >> .npmrc
          echo "@appwarden:registry=https://npm.pkg.github.com" >> .npmrc

          # Verify authentication works
          npm whoami --registry=https://npm.pkg.github.com/ || echo "Authentication failed, but continuing..."

        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.APPWARDEN_MIDDLEWARE_NPM_TOKEN }}

      - name: Release ðŸš€
        run: |
          # Create dist directory for tarball files
          mkdir -p dist

          # Run the release process
          pnpm release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.APPWARDEN_MIDDLEWARE_NPM_TOKEN }}
          NPM_CONFIG_PROVENANCE: "true"
          # Explicitly set NODE_AUTH_TOKEN for GitHub Packages
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
